---
# Github Actions build for rclone
# -*- compile-command: "yamllint -f parsable build.yml" -*-

name: test forked rclone

# Trigger the workflow on push or pull request
on:
  push:
    branches:
      - '*'
      - '!master'
      - '!upstream'
    tags:
      - '*'
  pull_request:

jobs:
  release:
    name: "build and publish release"
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          # checkout into a fixed path to avoid import path problems on go < 1.11
          path: ./src/github.com/rclone/rclone

      - name: Cross-compile rclone
        run: |
          export GOPATH=${{ runner.workspace }}
          export PATH=$GOPATH/bin:$PATH
          docker pull billziss/xgo-cgofuse
          GO111MODULE=off go get -v github.com/karalabe/xgo  # don't add to go.mod

          xgo \
              -image=billziss/xgo-cgofuse \
              -targets=linux/amd64,windows/amd64 \
              -tags=cmount \
              -dest=build \
              -ldflags="-s -X github.com/rclone/rclone/fs.Version=$(echo $GITHUB_REF |cut -d/ -f3)" \
              .

          cp -r build dist  # fix root ownership after xgo

      - name: List build artifacts
        run: |
          date | tee dist/timestamp.txt
          ls -l dist

      - name: Publish release
        uses: meeDamian/github-release@1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: >
            dist/timestamp.txt
            dist/rclone-linux-amd64
            dist/rclone-windows-4.0-amd64.exe
          gzip: false
          allow_override: true

  integration_test:
    name: "integration test"
    timeout-minutes: 90
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/test')

    steps:

      - name: Checkout
        uses: actions/checkout@v1
        with:
          path: ./src/github.com/rclone/rclone

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          stable: 'false'
          go-version: '1.14.x'

      - name: Prepare integration
        run: |
          # build test binaries
          export GOPATH=${{ runner.workspace }}
          export PATH=$GOPATH/bin:$PATH
          go version
          go install .
          go install ./fstest/test_all

          # create test configuration
          mkdir -p /tmp/crypt
          mkdir -p ~/.config/rclone
          cat > ~/.config/rclone/rclone.conf <<EOF
          ${{ secrets.test_conf }}
          EOF
          chmod 600 ~/.config/rclone/rclone.conf

      - name: Run integration test
        run: |
          export PATH=${{ runner.workspace }}/bin:$PATH
          test_all -verbose -timeout 50m -backends chunker |& tee integration.log

      - name: Purge test directories
        run: |
          export PATH=${{ runner.workspace }}/bin:$PATH
          for remote in TestS3 TestMailru; do
            (rclone lsd $remote: ||:) |awk '{print$5}' |grep rclone-test |xargs -rti rclone purge $remote:{} ||:
          done

      - name: Upload test log
        uses: actions/upload-artifact@v1
        with:
          name: integration.log
          path: integration.log

  test:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        job_name: ['linux', 'windows']

        include:
          - job_name: linux
            os: ubuntu-latest
            go: '1.16.x'
            gotags: cmount
            build_flags: '-include "^linux/"'
            check: true
            quicktest: true
            racequicktest: false
            deploy: true

          - job_name: windows
            os: windows-latest
            go: '1.16.x'
            gotags: cmount
            build_flags: '-include "^windows/amd64" -cgo'
            build_args: '-buildmode exe'
            quicktest: true
            racequicktest: false
            deploy: true

    name: ${{ matrix.job_name }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          stable: 'false'
          go-version: ${{ matrix.go }}

      - name: Set environment variables
        shell: bash
        run: |
          echo 'GOTAGS=${{ matrix.gotags }}' >> $GITHUB_ENV
          echo 'BUILD_FLAGS=${{ matrix.build_flags }}' >> $GITHUB_ENV
          echo 'BUILD_ARGS=${{ matrix.build_args }}' >> $GITHUB_ENV
          if [[ "${{ matrix.goarch }}" != "" ]]; then echo 'GOARCH=${{ matrix.goarch }}' >> $GITHUB_ENV ; fi
          if [[ "${{ matrix.cgo }}" != "" ]]; then echo 'CGO_ENABLED=${{ matrix.cgo }}' >> $GITHUB_ENV ; fi

      - name: Install Libraries on Linux
        shell: bash
        run: |
          sudo modprobe fuse
          sudo chmod 666 /dev/fuse
          sudo chown root:$USER /etc/fuse.conf
          sudo apt-get install fuse libfuse-dev rpm pkg-config
        if: matrix.os == 'ubuntu-latest'

      - name: Install Libraries on macOS
        shell: bash
        run: |
          brew update
          brew install --cask macfuse
        if: matrix.os == 'macOS-latest'

      - name: Install Libraries on Windows
        shell: powershell
        run: |
          $ProgressPreference = 'SilentlyContinue'
          choco install -y winfsp zip
          echo "CPATH=C:\Program Files\WinFsp\inc\fuse;C:\Program Files (x86)\WinFsp\inc\fuse" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if ($env:GOARCH -eq "386") {
            choco install -y mingw --forcex86 --force
            echo "C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw32\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }
          # Copy mingw32-make.exe to make.exe so the same command line
          # can be used on Windows as on macOS and Linux
          $path = (get-command mingw32-make.exe).Path
          Copy-Item -Path $path -Destination (Join-Path (Split-Path -Path $path) 'make.exe')
        if: matrix.os == 'windows-latest'

      - name: Print Go version and environment
        shell: bash
        run: |
          printf "Using go at: $(which go)\n"
          printf "Go version: $(go version)\n"
          printf "\n\nGo environment:\n\n"
          go env
          printf "\n\nRclone environment:\n\n"
          make vars
          printf "\n\nSystem environment:\n\n"
          env

      - name: Go module cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build rclone
        shell: bash
        run: |
          make

      - name: Run tests
        shell: bash
        run: |
          make quicktest
        if: matrix.quicktest

      - name: Race test
        shell: bash
        run: |
          make racequicktest
        if: matrix.racequicktest

      - name: Code quality test
        shell: bash
        run: |
          make build_dep
          make check
        if: matrix.check

      - name: Compile all architectures test
        shell: bash
        run: |
          make
          make compile_all
        if: matrix.compile_all

      - name: Deploy built binaries
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then make release_dep_linux ; fi
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then make release_dep_windows ; fi
          make ci_beta
        env:
          RCLONE_CONFIG_PASS: ${{ secrets.RCLONE_CONFIG_PASS }}
        # working-directory: '$(modulePath)'
        # Deploy binaries if enabled in config && not a PR && not a fork
        if: matrix.deploy && github.head_ref == '' && github.repository == 'rclone/rclone'
