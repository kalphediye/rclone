// Code generated by MockGen. DO NOT EDIT.
// Source: fs/fs.go

// Package fstest is a generated GoMock package.
package fs

import (
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockFs is a mock of Fs interface
type MockFs struct {
	ctrl     *gomock.Controller
	recorder *MockFsMockRecorder
}

// MockFsMockRecorder is the mock recorder for MockFs
type MockFsMockRecorder struct {
	mock *MockFs
}

// NewMockFs creates a new mock instance
func NewMockFs(ctrl *gomock.Controller) *MockFs {
	mock := &MockFs{ctrl: ctrl}
	mock.recorder = &MockFsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFs) EXPECT() *MockFsMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockFs) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockFsMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFs)(nil).Name))
}

// Root mocks base method
func (m *MockFs) Root() string {
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(string)
	return ret0
}

// Root indicates an expected call of Root
func (mr *MockFsMockRecorder) Root() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockFs)(nil).Root))
}

// String mocks base method
func (m *MockFs) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockFsMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockFs)(nil).String))
}

// Precision mocks base method
func (m *MockFs) Precision() time.Duration {
	ret := m.ctrl.Call(m, "Precision")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Precision indicates an expected call of Precision
func (mr *MockFsMockRecorder) Precision() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Precision", reflect.TypeOf((*MockFs)(nil).Precision))
}

// Hashes mocks base method
func (m *MockFs) Hashes() HashSet {
	ret := m.ctrl.Call(m, "Hashes")
	ret0, _ := ret[0].(HashSet)
	return ret0
}

// Hashes indicates an expected call of Hashes
func (mr *MockFsMockRecorder) Hashes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashes", reflect.TypeOf((*MockFs)(nil).Hashes))
}

// Features mocks base method
func (m *MockFs) Features() *Features {
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].(*Features)
	return ret0
}

// Features indicates an expected call of Features
func (mr *MockFsMockRecorder) Features() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockFs)(nil).Features))
}

// List mocks base method
func (m *MockFs) List(dir string) (DirEntries, error) {
	ret := m.ctrl.Call(m, "List", dir)
	ret0, _ := ret[0].(DirEntries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockFsMockRecorder) List(dir interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFs)(nil).List), dir)
}

// NewObject mocks base method
func (m *MockFs) NewObject(remote string) (Object, error) {
	ret := m.ctrl.Call(m, "NewObject", remote)
	ret0, _ := ret[0].(Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewObject indicates an expected call of NewObject
func (mr *MockFsMockRecorder) NewObject(remote interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewObject", reflect.TypeOf((*MockFs)(nil).NewObject), remote)
}

// Put mocks base method
func (m *MockFs) Put(in io.Reader, src ObjectInfo, options ...OpenOption) (Object, error) {
	varargs := []interface{}{in, src}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockFsMockRecorder) Put(in, src interface{}, options ...interface{}) *gomock.Call {
	varargs := append([]interface{}{in, src}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockFs)(nil).Put), varargs...)
}

// Mkdir mocks base method
func (m *MockFs) Mkdir(dir string) error {
	ret := m.ctrl.Call(m, "Mkdir", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir
func (mr *MockFsMockRecorder) Mkdir(dir interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockFs)(nil).Mkdir), dir)
}

// Rmdir mocks base method
func (m *MockFs) Rmdir(dir string) error {
	ret := m.ctrl.Call(m, "Rmdir", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rmdir indicates an expected call of Rmdir
func (mr *MockFsMockRecorder) Rmdir(dir interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rmdir", reflect.TypeOf((*MockFs)(nil).Rmdir), dir)
}

// MockInfo is a mock of Info interface
type MockInfo struct {
	ctrl     *gomock.Controller
	recorder *MockInfoMockRecorder
}

// MockInfoMockRecorder is the mock recorder for MockInfo
type MockInfoMockRecorder struct {
	mock *MockInfo
}

// NewMockInfo creates a new mock instance
func NewMockInfo(ctrl *gomock.Controller) *MockInfo {
	mock := &MockInfo{ctrl: ctrl}
	mock.recorder = &MockInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInfo) EXPECT() *MockInfoMockRecorder {
	return m.recorder
}

// Name mocks base method
func (m *MockInfo) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockInfoMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockInfo)(nil).Name))
}

// Root mocks base method
func (m *MockInfo) Root() string {
	ret := m.ctrl.Call(m, "Root")
	ret0, _ := ret[0].(string)
	return ret0
}

// Root indicates an expected call of Root
func (mr *MockInfoMockRecorder) Root() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Root", reflect.TypeOf((*MockInfo)(nil).Root))
}

// String mocks base method
func (m *MockInfo) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockInfoMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockInfo)(nil).String))
}

// Precision mocks base method
func (m *MockInfo) Precision() time.Duration {
	ret := m.ctrl.Call(m, "Precision")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Precision indicates an expected call of Precision
func (mr *MockInfoMockRecorder) Precision() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Precision", reflect.TypeOf((*MockInfo)(nil).Precision))
}

// Hashes mocks base method
func (m *MockInfo) Hashes() HashSet {
	ret := m.ctrl.Call(m, "Hashes")
	ret0, _ := ret[0].(HashSet)
	return ret0
}

// Hashes indicates an expected call of Hashes
func (mr *MockInfoMockRecorder) Hashes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashes", reflect.TypeOf((*MockInfo)(nil).Hashes))
}

// Features mocks base method
func (m *MockInfo) Features() *Features {
	ret := m.ctrl.Call(m, "Features")
	ret0, _ := ret[0].(*Features)
	return ret0
}

// Features indicates an expected call of Features
func (mr *MockInfoMockRecorder) Features() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Features", reflect.TypeOf((*MockInfo)(nil).Features))
}

// MockObject is a mock of Object interface
type MockObject struct {
	ctrl     *gomock.Controller
	recorder *MockObjectMockRecorder
}

// MockObjectMockRecorder is the mock recorder for MockObject
type MockObjectMockRecorder struct {
	mock *MockObject
}

// NewMockObject creates a new mock instance
func NewMockObject(ctrl *gomock.Controller) *MockObject {
	mock := &MockObject{ctrl: ctrl}
	mock.recorder = &MockObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObject) EXPECT() *MockObjectMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockObject) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockObjectMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockObject)(nil).String))
}

// Remote mocks base method
func (m *MockObject) Remote() string {
	ret := m.ctrl.Call(m, "Remote")
	ret0, _ := ret[0].(string)
	return ret0
}

// Remote indicates an expected call of Remote
func (mr *MockObjectMockRecorder) Remote() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remote", reflect.TypeOf((*MockObject)(nil).Remote))
}

// ModTime mocks base method
func (m *MockObject) ModTime() time.Time {
	ret := m.ctrl.Call(m, "ModTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ModTime indicates an expected call of ModTime
func (mr *MockObjectMockRecorder) ModTime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModTime", reflect.TypeOf((*MockObject)(nil).ModTime))
}

// Size mocks base method
func (m *MockObject) Size() int64 {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockObjectMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockObject)(nil).Size))
}

// Fs mocks base method
func (m *MockObject) Fs() Info {
	ret := m.ctrl.Call(m, "Fs")
	ret0, _ := ret[0].(Info)
	return ret0
}

// Fs indicates an expected call of Fs
func (mr *MockObjectMockRecorder) Fs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fs", reflect.TypeOf((*MockObject)(nil).Fs))
}

// Hash mocks base method
func (m *MockObject) Hash(arg0 HashType) (string, error) {
	ret := m.ctrl.Call(m, "Hash", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash
func (mr *MockObjectMockRecorder) Hash(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockObject)(nil).Hash), arg0)
}

// Storable mocks base method
func (m *MockObject) Storable() bool {
	ret := m.ctrl.Call(m, "Storable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Storable indicates an expected call of Storable
func (mr *MockObjectMockRecorder) Storable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storable", reflect.TypeOf((*MockObject)(nil).Storable))
}

// SetModTime mocks base method
func (m *MockObject) SetModTime(arg0 time.Time) error {
	ret := m.ctrl.Call(m, "SetModTime", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModTime indicates an expected call of SetModTime
func (mr *MockObjectMockRecorder) SetModTime(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModTime", reflect.TypeOf((*MockObject)(nil).SetModTime), arg0)
}

// Open mocks base method
func (m *MockObject) Open(options ...OpenOption) (io.ReadCloser, error) {
	varargs := []interface{}{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Open", varargs...)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockObjectMockRecorder) Open(options ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockObject)(nil).Open), options...)
}

// Update mocks base method
func (m *MockObject) Update(in io.Reader, src ObjectInfo, options ...OpenOption) error {
	varargs := []interface{}{in, src}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockObjectMockRecorder) Update(in, src interface{}, options ...interface{}) *gomock.Call {
	varargs := append([]interface{}{in, src}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockObject)(nil).Update), varargs...)
}

// Remove mocks base method
func (m *MockObject) Remove() error {
	ret := m.ctrl.Call(m, "Remove")
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockObjectMockRecorder) Remove() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockObject)(nil).Remove))
}

// MockObjectInfo is a mock of ObjectInfo interface
type MockObjectInfo struct {
	ctrl     *gomock.Controller
	recorder *MockObjectInfoMockRecorder
}

// MockObjectInfoMockRecorder is the mock recorder for MockObjectInfo
type MockObjectInfoMockRecorder struct {
	mock *MockObjectInfo
}

// NewMockObjectInfo creates a new mock instance
func NewMockObjectInfo(ctrl *gomock.Controller) *MockObjectInfo {
	mock := &MockObjectInfo{ctrl: ctrl}
	mock.recorder = &MockObjectInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockObjectInfo) EXPECT() *MockObjectInfoMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockObjectInfo) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockObjectInfoMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockObjectInfo)(nil).String))
}

// Remote mocks base method
func (m *MockObjectInfo) Remote() string {
	ret := m.ctrl.Call(m, "Remote")
	ret0, _ := ret[0].(string)
	return ret0
}

// Remote indicates an expected call of Remote
func (mr *MockObjectInfoMockRecorder) Remote() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remote", reflect.TypeOf((*MockObjectInfo)(nil).Remote))
}

// ModTime mocks base method
func (m *MockObjectInfo) ModTime() time.Time {
	ret := m.ctrl.Call(m, "ModTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ModTime indicates an expected call of ModTime
func (mr *MockObjectInfoMockRecorder) ModTime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModTime", reflect.TypeOf((*MockObjectInfo)(nil).ModTime))
}

// Size mocks base method
func (m *MockObjectInfo) Size() int64 {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockObjectInfoMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockObjectInfo)(nil).Size))
}

// Fs mocks base method
func (m *MockObjectInfo) Fs() Info {
	ret := m.ctrl.Call(m, "Fs")
	ret0, _ := ret[0].(Info)
	return ret0
}

// Fs indicates an expected call of Fs
func (mr *MockObjectInfoMockRecorder) Fs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fs", reflect.TypeOf((*MockObjectInfo)(nil).Fs))
}

// Hash mocks base method
func (m *MockObjectInfo) Hash(arg0 HashType) (string, error) {
	ret := m.ctrl.Call(m, "Hash", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash
func (mr *MockObjectInfoMockRecorder) Hash(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockObjectInfo)(nil).Hash), arg0)
}

// Storable mocks base method
func (m *MockObjectInfo) Storable() bool {
	ret := m.ctrl.Call(m, "Storable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Storable indicates an expected call of Storable
func (mr *MockObjectInfoMockRecorder) Storable() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storable", reflect.TypeOf((*MockObjectInfo)(nil).Storable))
}

// MockDirEntry is a mock of DirEntry interface
type MockDirEntry struct {
	ctrl     *gomock.Controller
	recorder *MockDirEntryMockRecorder
}

// MockDirEntryMockRecorder is the mock recorder for MockDirEntry
type MockDirEntryMockRecorder struct {
	mock *MockDirEntry
}

// NewMockDirEntry creates a new mock instance
func NewMockDirEntry(ctrl *gomock.Controller) *MockDirEntry {
	mock := &MockDirEntry{ctrl: ctrl}
	mock.recorder = &MockDirEntryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirEntry) EXPECT() *MockDirEntryMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockDirEntry) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockDirEntryMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockDirEntry)(nil).String))
}

// Remote mocks base method
func (m *MockDirEntry) Remote() string {
	ret := m.ctrl.Call(m, "Remote")
	ret0, _ := ret[0].(string)
	return ret0
}

// Remote indicates an expected call of Remote
func (mr *MockDirEntryMockRecorder) Remote() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remote", reflect.TypeOf((*MockDirEntry)(nil).Remote))
}

// ModTime mocks base method
func (m *MockDirEntry) ModTime() time.Time {
	ret := m.ctrl.Call(m, "ModTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ModTime indicates an expected call of ModTime
func (mr *MockDirEntryMockRecorder) ModTime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModTime", reflect.TypeOf((*MockDirEntry)(nil).ModTime))
}

// Size mocks base method
func (m *MockDirEntry) Size() int64 {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockDirEntryMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockDirEntry)(nil).Size))
}

// MockDirectory is a mock of Directory interface
type MockDirectory struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryMockRecorder
}

// MockDirectoryMockRecorder is the mock recorder for MockDirectory
type MockDirectoryMockRecorder struct {
	mock *MockDirectory
}

// NewMockDirectory creates a new mock instance
func NewMockDirectory(ctrl *gomock.Controller) *MockDirectory {
	mock := &MockDirectory{ctrl: ctrl}
	mock.recorder = &MockDirectoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirectory) EXPECT() *MockDirectoryMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockDirectory) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockDirectoryMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockDirectory)(nil).String))
}

// Remote mocks base method
func (m *MockDirectory) Remote() string {
	ret := m.ctrl.Call(m, "Remote")
	ret0, _ := ret[0].(string)
	return ret0
}

// Remote indicates an expected call of Remote
func (mr *MockDirectoryMockRecorder) Remote() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remote", reflect.TypeOf((*MockDirectory)(nil).Remote))
}

// ModTime mocks base method
func (m *MockDirectory) ModTime() time.Time {
	ret := m.ctrl.Call(m, "ModTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ModTime indicates an expected call of ModTime
func (mr *MockDirectoryMockRecorder) ModTime() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModTime", reflect.TypeOf((*MockDirectory)(nil).ModTime))
}

// Size mocks base method
func (m *MockDirectory) Size() int64 {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockDirectoryMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockDirectory)(nil).Size))
}

// Items mocks base method
func (m *MockDirectory) Items() int64 {
	ret := m.ctrl.Call(m, "Items")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Items indicates an expected call of Items
func (mr *MockDirectoryMockRecorder) Items() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Items", reflect.TypeOf((*MockDirectory)(nil).Items))
}

// ID mocks base method
func (m *MockDirectory) ID() string {
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockDirectoryMockRecorder) ID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDirectory)(nil).ID))
}

// MockMimeTyper is a mock of MimeTyper interface
type MockMimeTyper struct {
	ctrl     *gomock.Controller
	recorder *MockMimeTyperMockRecorder
}

// MockMimeTyperMockRecorder is the mock recorder for MockMimeTyper
type MockMimeTyperMockRecorder struct {
	mock *MockMimeTyper
}

// NewMockMimeTyper creates a new mock instance
func NewMockMimeTyper(ctrl *gomock.Controller) *MockMimeTyper {
	mock := &MockMimeTyper{ctrl: ctrl}
	mock.recorder = &MockMimeTyperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMimeTyper) EXPECT() *MockMimeTyperMockRecorder {
	return m.recorder
}

// MimeType mocks base method
func (m *MockMimeTyper) MimeType() string {
	ret := m.ctrl.Call(m, "MimeType")
	ret0, _ := ret[0].(string)
	return ret0
}

// MimeType indicates an expected call of MimeType
func (mr *MockMimeTyperMockRecorder) MimeType() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MimeType", reflect.TypeOf((*MockMimeTyper)(nil).MimeType))
}

// MockPurger is a mock of Purger interface
type MockPurger struct {
	ctrl     *gomock.Controller
	recorder *MockPurgerMockRecorder
}

// MockPurgerMockRecorder is the mock recorder for MockPurger
type MockPurgerMockRecorder struct {
	mock *MockPurger
}

// NewMockPurger creates a new mock instance
func NewMockPurger(ctrl *gomock.Controller) *MockPurger {
	mock := &MockPurger{ctrl: ctrl}
	mock.recorder = &MockPurgerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPurger) EXPECT() *MockPurgerMockRecorder {
	return m.recorder
}

// Purge mocks base method
func (m *MockPurger) Purge() error {
	ret := m.ctrl.Call(m, "Purge")
	ret0, _ := ret[0].(error)
	return ret0
}

// Purge indicates an expected call of Purge
func (mr *MockPurgerMockRecorder) Purge() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockPurger)(nil).Purge))
}

// MockCopier is a mock of Copier interface
type MockCopier struct {
	ctrl     *gomock.Controller
	recorder *MockCopierMockRecorder
}

// MockCopierMockRecorder is the mock recorder for MockCopier
type MockCopierMockRecorder struct {
	mock *MockCopier
}

// NewMockCopier creates a new mock instance
func NewMockCopier(ctrl *gomock.Controller) *MockCopier {
	mock := &MockCopier{ctrl: ctrl}
	mock.recorder = &MockCopierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCopier) EXPECT() *MockCopierMockRecorder {
	return m.recorder
}

// Copy mocks base method
func (m *MockCopier) Copy(src Object, remote string) (Object, error) {
	ret := m.ctrl.Call(m, "Copy", src, remote)
	ret0, _ := ret[0].(Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Copy indicates an expected call of Copy
func (mr *MockCopierMockRecorder) Copy(src, remote interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockCopier)(nil).Copy), src, remote)
}

// MockMover is a mock of Mover interface
type MockMover struct {
	ctrl     *gomock.Controller
	recorder *MockMoverMockRecorder
}

// MockMoverMockRecorder is the mock recorder for MockMover
type MockMoverMockRecorder struct {
	mock *MockMover
}

// NewMockMover creates a new mock instance
func NewMockMover(ctrl *gomock.Controller) *MockMover {
	mock := &MockMover{ctrl: ctrl}
	mock.recorder = &MockMoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMover) EXPECT() *MockMoverMockRecorder {
	return m.recorder
}

// Move mocks base method
func (m *MockMover) Move(src Object, remote string) (Object, error) {
	ret := m.ctrl.Call(m, "Move", src, remote)
	ret0, _ := ret[0].(Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Move indicates an expected call of Move
func (mr *MockMoverMockRecorder) Move(src, remote interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockMover)(nil).Move), src, remote)
}

// MockDirMover is a mock of DirMover interface
type MockDirMover struct {
	ctrl     *gomock.Controller
	recorder *MockDirMoverMockRecorder
}

// MockDirMoverMockRecorder is the mock recorder for MockDirMover
type MockDirMoverMockRecorder struct {
	mock *MockDirMover
}

// NewMockDirMover creates a new mock instance
func NewMockDirMover(ctrl *gomock.Controller) *MockDirMover {
	mock := &MockDirMover{ctrl: ctrl}
	mock.recorder = &MockDirMoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirMover) EXPECT() *MockDirMoverMockRecorder {
	return m.recorder
}

// DirMove mocks base method
func (m *MockDirMover) DirMove(src Fs, srcRemote, dstRemote string) error {
	ret := m.ctrl.Call(m, "DirMove", src, srcRemote, dstRemote)
	ret0, _ := ret[0].(error)
	return ret0
}

// DirMove indicates an expected call of DirMove
func (mr *MockDirMoverMockRecorder) DirMove(src, srcRemote, dstRemote interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirMove", reflect.TypeOf((*MockDirMover)(nil).DirMove), src, srcRemote, dstRemote)
}

// MockDirChangeNotifier is a mock of DirChangeNotifier interface
type MockDirChangeNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockDirChangeNotifierMockRecorder
}

// MockDirChangeNotifierMockRecorder is the mock recorder for MockDirChangeNotifier
type MockDirChangeNotifierMockRecorder struct {
	mock *MockDirChangeNotifier
}

// NewMockDirChangeNotifier creates a new mock instance
func NewMockDirChangeNotifier(ctrl *gomock.Controller) *MockDirChangeNotifier {
	mock := &MockDirChangeNotifier{ctrl: ctrl}
	mock.recorder = &MockDirChangeNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirChangeNotifier) EXPECT() *MockDirChangeNotifierMockRecorder {
	return m.recorder
}

// DirChangeNotify mocks base method
func (m *MockDirChangeNotifier) DirChangeNotify(arg0 func(string), arg1 time.Duration) chan bool {
	ret := m.ctrl.Call(m, "DirChangeNotify", arg0, arg1)
	ret0, _ := ret[0].(chan bool)
	return ret0
}

// DirChangeNotify indicates an expected call of DirChangeNotify
func (mr *MockDirChangeNotifierMockRecorder) DirChangeNotify(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirChangeNotify", reflect.TypeOf((*MockDirChangeNotifier)(nil).DirChangeNotify), arg0, arg1)
}

// MockUnWrapper is a mock of UnWrapper interface
type MockUnWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockUnWrapperMockRecorder
}

// MockUnWrapperMockRecorder is the mock recorder for MockUnWrapper
type MockUnWrapperMockRecorder struct {
	mock *MockUnWrapper
}

// NewMockUnWrapper creates a new mock instance
func NewMockUnWrapper(ctrl *gomock.Controller) *MockUnWrapper {
	mock := &MockUnWrapper{ctrl: ctrl}
	mock.recorder = &MockUnWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnWrapper) EXPECT() *MockUnWrapperMockRecorder {
	return m.recorder
}

// UnWrap mocks base method
func (m *MockUnWrapper) UnWrap() Fs {
	ret := m.ctrl.Call(m, "UnWrap")
	ret0, _ := ret[0].(Fs)
	return ret0
}

// UnWrap indicates an expected call of UnWrap
func (mr *MockUnWrapperMockRecorder) UnWrap() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnWrap", reflect.TypeOf((*MockUnWrapper)(nil).UnWrap))
}

// MockWrapper is a mock of Wrapper interface
type MockWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockWrapperMockRecorder
}

// MockWrapperMockRecorder is the mock recorder for MockWrapper
type MockWrapperMockRecorder struct {
	mock *MockWrapper
}

// NewMockWrapper creates a new mock instance
func NewMockWrapper(ctrl *gomock.Controller) *MockWrapper {
	mock := &MockWrapper{ctrl: ctrl}
	mock.recorder = &MockWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWrapper) EXPECT() *MockWrapperMockRecorder {
	return m.recorder
}

// WrapFs mocks base method
func (m *MockWrapper) WrapFs() Fs {
	ret := m.ctrl.Call(m, "WrapFs")
	ret0, _ := ret[0].(Fs)
	return ret0
}

// WrapFs indicates an expected call of WrapFs
func (mr *MockWrapperMockRecorder) WrapFs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapFs", reflect.TypeOf((*MockWrapper)(nil).WrapFs))
}

// SetWrapper mocks base method
func (m *MockWrapper) SetWrapper(f Fs) {
	m.ctrl.Call(m, "SetWrapper", f)
}

// SetWrapper indicates an expected call of SetWrapper
func (mr *MockWrapperMockRecorder) SetWrapper(f interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWrapper", reflect.TypeOf((*MockWrapper)(nil).SetWrapper), f)
}

// MockDirCacheFlusher is a mock of DirCacheFlusher interface
type MockDirCacheFlusher struct {
	ctrl     *gomock.Controller
	recorder *MockDirCacheFlusherMockRecorder
}

// MockDirCacheFlusherMockRecorder is the mock recorder for MockDirCacheFlusher
type MockDirCacheFlusherMockRecorder struct {
	mock *MockDirCacheFlusher
}

// NewMockDirCacheFlusher creates a new mock instance
func NewMockDirCacheFlusher(ctrl *gomock.Controller) *MockDirCacheFlusher {
	mock := &MockDirCacheFlusher{ctrl: ctrl}
	mock.recorder = &MockDirCacheFlusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDirCacheFlusher) EXPECT() *MockDirCacheFlusherMockRecorder {
	return m.recorder
}

// DirCacheFlush mocks base method
func (m *MockDirCacheFlusher) DirCacheFlush() {
	m.ctrl.Call(m, "DirCacheFlush")
}

// DirCacheFlush indicates an expected call of DirCacheFlush
func (mr *MockDirCacheFlusherMockRecorder) DirCacheFlush() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirCacheFlush", reflect.TypeOf((*MockDirCacheFlusher)(nil).DirCacheFlush))
}

// MockPutUncheckeder is a mock of PutUncheckeder interface
type MockPutUncheckeder struct {
	ctrl     *gomock.Controller
	recorder *MockPutUncheckederMockRecorder
}

// MockPutUncheckederMockRecorder is the mock recorder for MockPutUncheckeder
type MockPutUncheckederMockRecorder struct {
	mock *MockPutUncheckeder
}

// NewMockPutUncheckeder creates a new mock instance
func NewMockPutUncheckeder(ctrl *gomock.Controller) *MockPutUncheckeder {
	mock := &MockPutUncheckeder{ctrl: ctrl}
	mock.recorder = &MockPutUncheckederMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPutUncheckeder) EXPECT() *MockPutUncheckederMockRecorder {
	return m.recorder
}

// PutUnchecked mocks base method
func (m *MockPutUncheckeder) PutUnchecked(in io.Reader, src ObjectInfo, options ...OpenOption) (Object, error) {
	varargs := []interface{}{in, src}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutUnchecked", varargs...)
	ret0, _ := ret[0].(Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutUnchecked indicates an expected call of PutUnchecked
func (mr *MockPutUncheckederMockRecorder) PutUnchecked(in, src interface{}, options ...interface{}) *gomock.Call {
	varargs := append([]interface{}{in, src}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUnchecked", reflect.TypeOf((*MockPutUncheckeder)(nil).PutUnchecked), varargs...)
}

// MockPutStreamer is a mock of PutStreamer interface
type MockPutStreamer struct {
	ctrl     *gomock.Controller
	recorder *MockPutStreamerMockRecorder
}

// MockPutStreamerMockRecorder is the mock recorder for MockPutStreamer
type MockPutStreamerMockRecorder struct {
	mock *MockPutStreamer
}

// NewMockPutStreamer creates a new mock instance
func NewMockPutStreamer(ctrl *gomock.Controller) *MockPutStreamer {
	mock := &MockPutStreamer{ctrl: ctrl}
	mock.recorder = &MockPutStreamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPutStreamer) EXPECT() *MockPutStreamerMockRecorder {
	return m.recorder
}

// PutStream mocks base method
func (m *MockPutStreamer) PutStream(in io.Reader, src ObjectInfo, options ...OpenOption) (Object, error) {
	varargs := []interface{}{in, src}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutStream", varargs...)
	ret0, _ := ret[0].(Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutStream indicates an expected call of PutStream
func (mr *MockPutStreamerMockRecorder) PutStream(in, src interface{}, options ...interface{}) *gomock.Call {
	varargs := append([]interface{}{in, src}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStream", reflect.TypeOf((*MockPutStreamer)(nil).PutStream), varargs...)
}

// MockMergeDirser is a mock of MergeDirser interface
type MockMergeDirser struct {
	ctrl     *gomock.Controller
	recorder *MockMergeDirserMockRecorder
}

// MockMergeDirserMockRecorder is the mock recorder for MockMergeDirser
type MockMergeDirserMockRecorder struct {
	mock *MockMergeDirser
}

// NewMockMergeDirser creates a new mock instance
func NewMockMergeDirser(ctrl *gomock.Controller) *MockMergeDirser {
	mock := &MockMergeDirser{ctrl: ctrl}
	mock.recorder = &MockMergeDirserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMergeDirser) EXPECT() *MockMergeDirserMockRecorder {
	return m.recorder
}

// MergeDirs mocks base method
func (m *MockMergeDirser) MergeDirs(arg0 []Directory) error {
	ret := m.ctrl.Call(m, "MergeDirs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergeDirs indicates an expected call of MergeDirs
func (mr *MockMergeDirserMockRecorder) MergeDirs(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeDirs", reflect.TypeOf((*MockMergeDirser)(nil).MergeDirs), arg0)
}

// MockCleanUpper is a mock of CleanUpper interface
type MockCleanUpper struct {
	ctrl     *gomock.Controller
	recorder *MockCleanUpperMockRecorder
}

// MockCleanUpperMockRecorder is the mock recorder for MockCleanUpper
type MockCleanUpperMockRecorder struct {
	mock *MockCleanUpper
}

// NewMockCleanUpper creates a new mock instance
func NewMockCleanUpper(ctrl *gomock.Controller) *MockCleanUpper {
	mock := &MockCleanUpper{ctrl: ctrl}
	mock.recorder = &MockCleanUpperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCleanUpper) EXPECT() *MockCleanUpperMockRecorder {
	return m.recorder
}

// CleanUp mocks base method
func (m *MockCleanUpper) CleanUp() error {
	ret := m.ctrl.Call(m, "CleanUp")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUp indicates an expected call of CleanUp
func (mr *MockCleanUpperMockRecorder) CleanUp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUp", reflect.TypeOf((*MockCleanUpper)(nil).CleanUp))
}

// MockListRer is a mock of ListRer interface
type MockListRer struct {
	ctrl     *gomock.Controller
	recorder *MockListRerMockRecorder
}

// MockListRerMockRecorder is the mock recorder for MockListRer
type MockListRerMockRecorder struct {
	mock *MockListRer
}

// NewMockListRer creates a new mock instance
func NewMockListRer(ctrl *gomock.Controller) *MockListRer {
	mock := &MockListRer{ctrl: ctrl}
	mock.recorder = &MockListRerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockListRer) EXPECT() *MockListRerMockRecorder {
	return m.recorder
}

// ListR mocks base method
func (m *MockListRer) ListR(dir string, callback ListRCallback) error {
	ret := m.ctrl.Call(m, "ListR", dir, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListR indicates an expected call of ListR
func (mr *MockListRerMockRecorder) ListR(dir, callback interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListR", reflect.TypeOf((*MockListRer)(nil).ListR), dir, callback)
}
